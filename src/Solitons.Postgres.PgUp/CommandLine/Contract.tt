<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #><#

    string contractSummary = "Defines the PgUp CLI interface, enabling streamlined project initialization and database deployment.";

    var initRoute = "init|initialize";
    var initCmdDescription = "Creates a new PgUp project structure with necessary files for PostgreSQL deployment.";
    var projectDirectoryDescription = "The target directory where the PgUp project files and deployment scripts will be created.";
    var templateParameterDefault = "basic";
    var templateParameterDescription = $"Specifies the template used to initialize the project. Default is '{templateParameterDefault}'.";

    string deployRoute = "deploy|db-deploy";
    string deployCmdDescription = "Deploys a PostgreSQL database using the specified project file and configurations.";
    string projectFileParameterDescription = "The PgUp project file defining the database structure and deployment settings.";
    string hostParameterDefault = "localhost";
    string hostParameterDescription = $"The hostname or IP address of the PostgreSQL server. Default is '{hostParameterDefault}'.";
    string portParameterDefault = 5432.ToString();
    string portParameterDescription = $"The port number of the PostgreSQL server. Default is {portParameterDefault}";
    string usernameParameterDescription = "The PostgreSQL user with permissions to create roles and databases.";
    string passwordParameterDescription = "The password for the PostgreSQL user.";
    string maintenanceDatabaseDefault = "postgres";
    string maintenanceDatabaseParameterDescription = $"The maintenance database to use during the deployment process. Default is '{maintenanceDatabaseDefault}'.";
    string parametersParameterDescription = "Key-value pairs to override default parameters in the project file.";
    string timeoutParameyerDefault = "1 minute";
    string timeoutParameterDescription = $"The maximum time to retry deployment in case of transient errors. Default is '{timeoutParameyerDefault}'.";
    string overwriteParameterDescription = "Drops the existing database and recreates it. All data will be lost.";
    string forceParameterDescription = "Suppresses confirmation prompts when overwriting the database. Overrides safety checks.";
#>

using System.ComponentModel;
using Solitons.CommandLine;
using Solitons.CommandLine.Reflection;

/// <summary>
/// <#= contractSummary #>
/// </summary>
public interface IPgUp
{
    /// <summary>
    /// <#= initCmdDescription #>
    /// </summary>
    /// <param name="projectDir"><#= projectDirectoryDescription #></param>
    /// <param name="template"><#= templateParameterDescription #></param>
	[CliRoute("<#= initRoute #>")]
    [CliArgument(nameof(projectDir), description: "<#= projectDirectoryDescription #>")]
    [Description("<#= initCmdDescription #>")]
    void Initialize(
        string projectDir,
        [CliOption("--template", "<#= templateParameterDescription #>")] string template = "<#= templateParameterDefault #>");

    /// <summary>
    /// <#= deployCmdDescription #>
    /// </summary>
    /// <param name="projectFile"><#= projectFileParameterDescription #></param>
    /// <param name="host"><#= hostParameterDescription #></param>
    /// <param name="port"><#= portParameterDescription #></param>
    /// <param name="username"><#= usernameParameterDescription #></param>
    /// <param name="password"><#=passwordParameterDescription #></param>
    /// <param name="maintenanceDatabase"><#= maintenanceDatabaseParameterDescription #></param>
    /// <param name="parameters"><#= parametersParameterDescription #></param>
    /// <param name="timeout"><#= timeoutParameterDescription #></param>
    /// <param name="overwrite"><#= overwriteParameterDescription #></param>
    /// <param name="force"><#= forceParameterDescription #></param>
    /// <returns></returns>
    [CliRoute("<#= deployRoute #>")]
    [CliArgument(nameof(projectFile), "<#= projectFileParameterDescription #>")]
    [CliCommandExample("deploy pgup.json --host localhost --username %ADMIN_USR% --password %ADMIN_PWD%", description: "Deploys using the specified admin credentials.")]
    [CliCommandExample("deploy pgup.json --host localhost --username %ADMIN_USR% --password %ADMIN_PWD% --timeout 00:30:00", description: "Deploys with a custom timeout of 30 minutes.")]
    [CliCommandExample("deploy pgup.json --host localhost --port 5432 --maintenance-database postgres --username %ADMIN_USR% --password %ADMIN_PWD% --timeout 00:30:00", description: "Specifies port, management database, and timeout.")]
    [CliCommandExample("deploy pgup.json --host localhost --port 5432 --maintenance-database postgres --username %ADMIN_USR% --password %ADMIN_PWD% --timeout 00:30:00 --parameter[dbName] my_database", description: "Overrides default parameters such as the database name.")]
    [Description("<#= deployCmdDescription #>")]
    Task<int> DeployAsync(
        string projectFile,
        [CliOption("--host|-h", "<#= hostParameterDescription #>", Default = "<#= hostParameterDefault #>")]string host,
        [CliOption("--port|-p", "<#= hostParameterDescription #>", Default = "5432")]int port,
        [CliOption("--username|--user|-u", "<#= usernameParameterDescription #>")]string username,
        [CliOption("--password|--pwd|-p", "<#=passwordParameterDescription #>")]string password,
        [CliOption("--maintenance-database|-mdb", "<#= maintenanceDatabaseParameterDescription #>", Default = "<#= maintenanceDatabaseDefault #>")]string maintenanceDatabase,
        [CliOption("--parameters|--parameter|-param", "<#= parametersParameterDescription #>")]Dictionary<string, string> parameters,
        [CliOption("--timeout", "<#= timeoutParameterDescription #>", Default = "<#= timeoutParameyerDefault #>")]TimeSpan timeout,
        [CliOption("--overwrite", "<#= overwriteParameterDescription #>")]CliFlag? overwrite = null,
        [CliOption("--force", "<#= forceParameterDescription #>")]CliFlag? force = null);
}
