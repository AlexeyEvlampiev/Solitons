// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Solitons.CommandLine
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class CliActionRegexRtt : Solitons.Text.RuntimeTextTemplate
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("^(?xim-s)\r\n# ---------------- PROGRAM --------------------\r\n(?<");
            this.Write(this.ToStringHelper.ToStringWithCulture(ProgramGroupName));
            this.Write(">\\S+)\r\n");
 if(IsDefaultMode){ 
            this.Write(" \r\n\r\n# ---------------- ACTION SEGMENTS ------------\r\n");
 foreach(var segment in CommandSegments){ 
            this.Write(" \r\n(?:\r\n    \\s+ \r\n    (?: ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetSegmentPattern(segment)));
            this.Write(" ) \r\n) ");
 } 
            this.Write(" \r\n# --- OPTIONS ---\r\n(?: \r\n  \\s+ \r\n  (?:");
 foreach(var option in Options){ 
            this.Write(" \r\n     (?: ");
            this.Write(this.ToStringHelper.ToStringWithCulture(option.Pattern));
            this.Write(") | ");
 } 
            this.Write("  \r\n     (?<");
            this.Write(this.ToStringHelper.ToStringWithCulture(UnrecognizedCommandTokenName));
            this.Write(">\\S+) # Unrecognized token\r\n  )\r\n)*\r\n\r\n");
 } else if(IsSimilarityMode){ 



            this.Write("# --- COMMANDS ---\r\n(?: \r\n  \\s+ \r\n  (?: ");
 foreach(var command in SubCommands){ 
            this.Write(" \r\n    (?<");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetSegmentGroupName(command)));
            this.Write(">");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetSegmentPattern(command)));
            this.Write(")|");
 } 
            this.Write(" \r\n    [^\\s-]\\S*\r\n  )\r\n)*\r\n\r\n\r\n# --- PARAMETERS ---\r\n(?: \r\n  \\s+ \r\n  (?: ");
 foreach(var option in Options){ 
            this.Write(" \r\n    (?<");
            this.Write(this.ToStringHelper.ToStringWithCulture(option.Name));
            this.Write(">");
            this.Write(this.ToStringHelper.ToStringWithCulture(option.Pattern));
            this.Write(")|");
 } 
            this.Write(" \r\n    \\S+\r\n  )\r\n)*\r\n\r\n\r\n");
 } 
            this.Write("\r\n\r\n\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
